;****************************************************************************
; DrawCard
; Draws a card on the table.
;----------------------------------------------------------------------------
; input d7.w ... X coordinate
; input d6.w ... Y coordinate
; input d5.b ... Card value (set bit 7 to cover it)
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

DrawCard:
    tst.b   d5                          ; Determine card type
    beq.s   @Empty
    bmi.s   @Covered

;----------------------------------------------------------------------------

@Exposed:
    subq.b  #1, d5                      ; Determine card graphic
    and.w   #$FF, d5
    lsl.w   #3, d5
    move.w  d5, a6
    add.w   d5, d5
    add.w   a6, d5
    add.w   #VramCards, d5
    move.w  d5, a4
    
    moveq   #0, d5                      ; Draw the card
    move.w  #4, a6
    move.w  #6, a5
    syscall OS_DRAWTILES
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Covered:
    and.b   #$7F, d5                    ; Corner case ($80 = empty)
    beq.s   @Empty
    
    moveq   #0, d5                      ; Draw the card's back
    move.w  #2, a6
    move.w  #4, a5
    move.w  #$2000+VramReverse, a4
    syscall OS_FILLFRAME
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Empty:
    moveq   #0, d5                      ; Blank the area
    move.w  #4, a6
    move.w  #6, a5
    syscall OS_ERASETILES
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateAllWidgets
; Updates the area covered by all the card widgets.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateAllWidgets:
    bsr     UpdateStockWidget           ; Update stock
    
    moveq   #8-1, d7                    ; Update heap and all piles
@Piles:                                 ; (note that heap is pile #0)
    move.w  d7, -(sp)
    bsr     UpdatePileWidget
    move.w  (sp)+, d7
    dbf     d7, @Piles
    
    rts                                 ; End of subroutine

;****************************************************************************
; DoDragging
; Handles dragging the cards around.
;----------------------------------------------------------------------------
; input d7.b ... Source pile
; input d6.w ... $FFxx in the middle of dragging
;                $00xx to drop the cards
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DoDragging:
    tst.w   d6                          ; Drop the cards?
    bpl     DropCards
    
    moveq   #0, d1                      ; We'll need this later if we aren't
    move.b  d7, d1                      ; dragging cards yet
    
    syscall OS_GETCURSORPOS             ; Where will cards show up?
    moveq   #-16, d2
    moveq   #-4, d3
    add.w   d7, d2
    add.w   d6, d3
    
    lea     (Dragging), a0              ; Pointer to dragged cards
    moveq   #0, d0                      ; How many cards are being dragged?
    move.b  (DragLen), d0
    bne     @AlreadyPicked

;----------------------------------------------------------------------------

    tst.b   d1                          ; Grabbing from the heap?
    bne.s   @NotHeap
    
    moveq   #1, d0                      ; Always pick one
    move.b  d0, (DragLen)
    
    moveq   #0, d7                      ; Pick the top card from the heap
    move.b  (HeapLen), d7
    subq.b  #1, d7
    move.b  d7, (HeapLen)
    lea     (Heap), a6
    move.b  (a6,d7.w), (a0)
    
    movem.l d0/d2-d3/a0, -(sp)          ; Update heap
    bsr     UpdateHeapWidget
    bsr     DrawHeap
    movem.l (sp)+, d0/d2-d3/a0
    
    bra     @AlreadyPicked              ; Go drag it around

;----------------------------------------------------------------------------

@NotHeap:
    syscall OS_GETEVENTXY               ; Determine from which card of the
    subq.w  #8, d6                      ; pile we're picking
    
    subq.w  #1, d1                      ; Determine how many cards to pick
    moveq   #0, d0
    lea     (PileLen), a6
    move.b  (a6,d1.w), d0
    cmp.b   d6, d0
    bhi.s   @NotTop
    move.b  d0, d6
    subq.b  #1, d6
@NotTop:
    move.b  d6, (a6,d1.w)
    sub.b   d6, d0
    move.b  d0, (DragLen)
    
    move.w  d1, d7
    lsl.w   #5, d7                      ; Pointer to cards from pile
    lea     (Piles), a6
    lea     (a6,d7.w), a6
    lea     (a6,d6.w), a6
    
    move.l  a0, a5                      ; Move cards from pile to drag list
    move.w  d0, d7
    subq.w  #1, d7
@PickFromPile:
    move.b  (a6)+, (a5)+
    dbf     d7, @PickFromPile
    
    movem.l d0/d2-d3/a0, -(sp)          ; Update pile
    addq.w  #1, d1
    move.w  d1, d7
    bsr     UpdatePileWidget
    move.w  d1, d7
    bsr     DrawPile
    movem.l (sp)+, d0/d2-d3/a0

;----------------------------------------------------------------------------

@AlreadyPicked:
    move.b  (DragSpr), d1               ; ID of first sprite
    
    subq.w  #2, d0                      ; Dragging more than one card? (i.e.
    bmi.s   @OneCard                    ; are there partially covered cards?)
    
@DrawCards:                             ; Draw all the partially covered
    moveq   #0, d7                      ; cards (only the first row of each
    move.b  (a0)+, d7                   ; is visible)
    subq.w  #1, d7
    lsl.w   #3, d7
    move.w  d7, d6
    add.w   d7, d7
    add.w   d6, d7
    add.w   #VramCards, d7
    move.w  d7, a6
    move.b  d1, d7
    move.w  d2, d6
    move.w  d3, d5
    move.w  #%1100, a5
    syscall OS_SETSPRITE
    addq.b  #1, d1
    addq.w  #8, d3
    dbf     d0, @DrawCards
    
@OneCard:
    moveq   #0, d7                      ; Draw the card on top of the stash
    move.b  (a0)+, d7                   ; being dragged around (the only one
    subq.w  #1, d7                      ; that's fully visible)
    lsl.w   #3, d7
    move.w  d7, d6
    add.w   d7, d7
    add.w   d6, d7
    add.w   #VramCards, d7
    move.w  d7, d4
    moveq   #6-1, d0
@MainCard:
    move.w  d1, d7
    move.w  d2, d6
    move.w  d3, d5
    move.w  d4, a6
    move.w  #%1100, a5
    syscall OS_SETSPRITE
    addq.b  #1, d1
    addq.w  #8, d3
    addq.w  #4, d4
    dbf     d0, @MainCard
    
    rts                                 ; End of subroutine

;****************************************************************************
; DropCards
; Called to drop the dragged cards.
;----------------------------------------------------------------------------
; input d7.b ... Source pile
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DropCards:
    moveq   #0, d0                      ; Where it won't get clobbered
    move.b  d7, d0
    
    syscall OS_GETEVENTXY               ; Check in which region it landed
    move.w  a6, d7                      ; Recalculating the tile-based
    move.w  a5, d6                      ; coordinates in order to be a bit
    addq.w  #4, d7                      ; more forgiving
    addq.w  #4, d6
    asr.w   #3, d7
    asr.w   #3, d6
    
    cmp.w   #8, d6
    blo.s   @ReturnIt

;----------------------------------------------------------------------------

    subq.w  #4, d7                      ; Determine which pile it landed on
    blt     @ReturnIt
    and.l   #$FFFF, d7
    divu.w  #5, d7
    cmp.w   #6, d7
    bhi     @ReturnIt
    
    move.b  d7, d0                      ; Drop on this pile!
    addq.b  #ID_PILE, d0

;----------------------------------------------------------------------------

@ReturnIt:
    moveq   #0, d1                      ; How many cards to drop?
    move.b  (DragLen), d1
    
    moveq   #0, d2                      ; How many cards are there already?
    lea     (HeapLen), a0
    move.b  (a0,d0.w), d2
    add.b   d1, (a0,d0.w)
    
    move.w  d0, d7                      ; Get pointer to where to drop cards
    lsl.w   #5, d7
    lea     (Heap), a0
    lea     (a0,d7.w), a0
    lea     (a0,d2.w), a0
    
    lea     (Dragging), a1              ; Drop cards on the pile
    subq.w  #1, d1
@Loop:
    move.b  (a1)+, (a0)+
    dbf     d1, @Loop
    
    move.b  d0, d7                      ; Redraw pile
    bsr     UpdatePileWidget
    move.b  d0, d7
    bsr     DrawPile

;****************************************************************************
; ResetDragging
; Initializes dragging state (to no cards being held).
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

ResetDragging:
    move.b  (DragSpr), d1               ; Get rid of sprites
    moveq   #19-1, d0
@RemoveSprites:
    move.b  d1, d7
    moveq   #-128, d6
    moveq   #-128, d5
    syscall OS_SETSPRITE
    addq.b  #1, d1
    dbf     d0, @RemoveSprites
    
    clr.b   (DragLen)                   ; No more dragged cards
    rts                                 ; End of subroutine

EntryPoint:
    moveq   #0, d7                      ; Load graphics
    move.w  #NumPatterns, d6
    lea     Patterns(pc), a6
    syscall OS_LOADPATTERNS
    moveq   #1, d7
    lea     AltPalette(pc), a6
    syscall OS_LOADPALETTE
    
    lea     Layout(pc), a6              ; Load interface
    syscall OS_PARSELAYOUT
    
    syscall OS_ALLOCSPRITE              ; Allocate sprite for the cursor
    move.b  d7, (CursorSprite)
    
;----------------------------------------------------------------------------

    moveq   #0, d7                      ; Draw monitor
    moveq   #0, d6
    moveq   #0, d5
    move.w  #40, a6
    move.w  #25, a5
    move.w  #VramBorder+$A000, a4
    syscall OS_FILLTILES

    moveq   #1, d7                      ; Draw monitor frame
    moveq   #1, d6
    moveq   #0, d5
    move.w  #36, a6
    move.w  #21, a5
    move.w  #VramFrame+$A000, a4
    syscall OS_FILLFRAME
    
    moveq   #2, d7                      ; Draw text mode graphics
    moveq   #0, d6
    moveq   #1, d5
    move.w  #36, a6
    move.w  #32, a5
    move.w  #VramScreen+$2000, a4
    syscall OS_DRAWTILES
    
    move.w  #VramScreen, d7
    move.w  #36*NUM_ROWS, d6
    moveq   #$0E, d5
    syscall OS_FILLPATTERNS

;----------------------------------------------------------------------------

    clr.b   (CursorX)                   ; Set up console
    clr.b   (CursorY)
    clr.b   (CursorBlink)
    bsr     ClearInput
    bsr     ClearBuffer
    
    lea     @HelpMessage(pc), a6
    bsr     PrintLine
    bsr     PrintBlank
    
    bra     MainLoop

@HelpMessage:
    dc.b    'Type "help" for a list of commands.',0
    even

;----------------------------------------------------------------------------

MainLoop:
    bsr     PrintInput                  ; Update the screen
    bsr     UpdateCursor
    
    syscall OS_GUILOOP                  ; Wait for an event
    
    and.w   #$FF, d7                    ; Handle the event
    lsl.w   #2, d7
    lea     @Handlers(pc), a6
    jsr     (a6,d7.w)
    
    bra.s   MainLoop                    ; Keep going

;----------------------------------------------------------------------------

@Handlers:
    bra.w   DoCursorBlink
    bra.w   GotAscii

;****************************************************************************
; RunCommand
; Runs the entered command.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

RunCommand:
    bsr     AdvanceLine                 ; Leave the command line alone
    
    lea     (InputBuffer), a6           ; Erase excess whitespace
    move.l  a6, a5
    moveq   #$20, d6
    moveq   #1, d7
@SpaceLoop:
    move.b  (a6)+, d6
    beq.s   @SpaceEnd
    cmp.b   #$20, d6
    beq.s   @SpaceBlank
    moveq   #0, d7
@SpaceGraph:
    move.b  d6, (a5)+
    bra.s   @SpaceLoop
@SpaceBlank:
    move.w  d7, d5
    moveq   #1, d7
    tst.w   d5
    beq.s   @SpaceGraph
    bra.s   @SpaceLoop
@SpaceEnd:
    clr.b   (a5)
    
    tst.b   (InputBuffer)               ; Ignore empty lines
    beq     ClearInput
    cmpi.b  #'#', (InputBuffer)         ; Comments too
    beq     ClearInput
    
    lea     (InputBuffer), a6           ; Split arguments into their own
    moveq   #$20, d7                    ; strings (replace spaces with nuls,
@SplitArgs:                             ; real end of string will be a
    move.b  (a6)+, d6                   ; double nul)
    beq.s   @SplitEnd
    cmp.b   d7, d6
    bne.s   @SplitArgs
    clr.b   -1(a6)
    bra.s   @SplitArgs
@SplitEnd:
    
    lea     @List(pc), a0               ; Try all possible commands
    move.l  a0, a1
@CheckCommand:
    move.w  (a1)+, d7
    beq.s   @BadCommand
    move.w  (a1)+, d6
    lea     (a0,d7.w), a5
    lea     (a0,d6.w), a2
    lea     (InputBuffer), a6
    syscall OS_STREQU
    tst.w   d7
    beq.s   @CheckCommand
    jsr     (a2)
    bra.s   @Done
    
@BadCommand:
    lea     @Invalid(pc), a6            ; Invalid command
    bsr     PrintLine
    
@Done:
    bsr     ClearInput                  ; Erase any entered text now
    bsr     PrintBlank                  ; For spacing purposes
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Invalid:           dc.b 'Eh?',0

@CmdHelp:           dc.b 'help',0
@CmdVer:            dc.b 'ver',0
@CmdMem:            dc.b 'mem',0
@CmdExit:           dc.b 'exit',0
                    even

;----------------------------------------------------------------------------

@List:
    dc.w    @CmdHelp-@List, ShowHelp-@List
    dc.w    @CmdVer-@List, ShowVersion-@List
    dc.w    @CmdMem-@List, ShowMemory-@List
    dc.w    @CmdExit-@List, ExitTerminal-@List
    dc.w    0

;****************************************************************************
; ShowHelp
; Shows the list of commands.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

ShowHelp:
    lea     @CmdVer(pc), a6
    bsr     PrintLine
    lea     @CmdMem(pc), a6
    bsr     PrintLine
    lea     @CmdExit(pc), a6
    bra     PrintLine

;----------------------------------------------------------------------------

@CmdVer:            dc.b 'ver .... Show Indigo version',0
@CmdMem:            dc.b 'mem .... Show amount of memory',0
@CmdExit:           dc.b 'exit ... Quits the terminal',0
                    even

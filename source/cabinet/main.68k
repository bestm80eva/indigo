EntryPoint:
    moveq   #0, d7                      ; Load graphics
    move.w  #NumPatterns, d6
    lea     Patterns(pc), a6
    syscall OS_LOADPATTERNS
    moveq   #2, d7
    lea     InvPalette(pc), a6
    syscall OS_LOADPALETTE
    moveq   #1, d7
    lea     OpenPalette(pc), a6
    syscall OS_LOADPALETTE
    
    lea     Layout(pc), a6              ; Load interface
    syscall OS_PARSELAYOUT
    
    moveq   #FLIST_X-1, d7              ; Draw frame for file list
    moveq   #FLIST_Y-1, d6
    moveq   #0, d5
    move.w  #FLIST_W, a6
    move.w  #FLIST_H, a5
    move.w  #VramFrame, a4
    syscall OS_FILLFRAME
    
    moveq   #PATH_X-1, d7               ; Draw path widget
    moveq   #PATH_Y, d6
    moveq   #0, d5
    move.w  #PATH_W, a6
    move.w  #VramFilename, a5
    syscall OS_DRAWHBAR
    bsr     InitPath
    
    move.w  #'/'<<8, (CurrDir)          ; Default path
    
    bsr     LoadDirectory               ; Load initial files
    ;bsr     MakeTestList

;----------------------------------------------------------------------------

MainLoop:
    syscall OS_GUILOOP                  ; Let the GUI run
    
    and.w   #$FF, d7                    ; Jump to the relevant event handler
    lsl.w   #2, d7
    lea     @Handlers(pc), a6
    lea     (a6,d7.w), a6
    jsr     (a6)
    
    bra.s   MainLoop

;----------------------------------------------------------------------------

@Handlers:
    bra.w   FileListClick               ; ID_FILELIST
    bra.w   ScrollerMoved               ; ID_SCROLL
    bra.w   ScrollUp                    ; ID_SCROLL_U
    bra.w   ScrollDown                  ; ID_SCROLL_D
    bra.w   GoToParent                  ; ID_PARENT
    bra.w   DoOpen                      ; ID_OPEN

@Dummy:
    rts

;****************************************************************************
; MakeTestList
; Adds fake entries to the file list. Will be removed once we have real
; directories to be displayed.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

MakeTestList:
    bsr     ClearFileList
    
    moveq   #5-1, d2
@Loop2:
    moveq   #1, d1
    moveq   #4-1, d0
@Loop:
    move.w  d1, d7
    lea     @FakeFile1(pc), a6
    bsr     AddFileEntry
    move.w  d1, d7
    lea     @FakeFile2(pc), a6
    bsr     AddFileEntry
    move.w  d1, d7
    lea     @FakeFile3(pc), a6
    bsr     AddFileEntry
    move.w  d1, d7
    lea     @FakeFile4(pc), a6
    bsr     AddFileEntry
    move.w  d1, d7
    lea     @FakeFile5(pc), a6
    bsr     AddFileEntry
    addq.w  #1, d1
    dbf     d0, @Loop
    dbf     d2, @Loop2
    
    bsr     GetFileListReady            ; Done adding files
    bra     RefreshFileList             ; Redraw the list
    rts

;----------------------------------------------------------------------------

@FakeFile1:         dc.b '68000.text',0
@FakeFile2:         dc.b 'z80.text',0
@FakeFile3:         dc.b 'video.text',0
@FakeFile4:         dc.b 'sound.text',0
@FakeFile5:         dc.b 'joypad.text',0
                    even

;****************************************************************************
; LoadDirectory
; Loads the file list from the current directory.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

LoadDirectory:
    moveq   #OSCURSOR_BUSY, d7          ; This will take a while...
    syscall OS_SETCURSOR
    
    lea     (CurrDir), a6               ; Open the current directory
    syscall OS_OPENDIR
    tst.b   d7
    beq.s   @Error
    
    move.w  d7, -(sp)                   ; Init the list
    bsr     ClearFileList
    move.w  (sp)+, d0
    
@Loop:
    move.b  d0, d7                      ; Read next entry
    syscall OS_READDIR
    cmp.w   #$FFFF, d7
    beq.s   @End
    
    tst.w   d7                          ; Is it a folder?
    bpl.s   @IsAFile
    moveq   #ICON_FOLDER, d7
    bra.s   @TypeReady
    
@IsAFile:
    moveq   #ICON_UNKNOWN, d7           ; Default icon for files
    
    move.l  a6, a5                      ; Check for known types
@FindNameEnd:
    tst.b   (a5)+
    bne.s   @FindNameEnd
    subq.w  #5+1, a5
    cmpi.b  #'.', (a5)+
    bne.s   @TypeReady
    
    move.b  (a5)+, d6                   ; Get extension
    move.b  d6, -(sp)
    move.w  (sp)+, d6
    move.b  (a5)+, d6
    swap    d6
    move.b  (a5)+, d6
    move.b  d6, -(sp)
    move.w  (sp)+, d6
    move.b  (a5)+, d6
    
    cmpi.l  #'ixec', d6                 ; Program?
    bne.s   @NotIxec
    moveq   #ICON_IXEC, d7
    bra.s   @TypeReady
@NotIxec:
    cmpi.l  #'text', d6                 ; Text file?
    bne.s   @NotText
    moveq   #ICON_TEXT, d7
    ;bra.s   @TypeReady
@NotText:
    
@TypeReady:
    bsr     AddFileEntry                ; Add file to the list
    bra.s   @Loop                       ; Keep reading!
    
@End:
    move.b  d0, d7                      ; Done with directory
    syscall OS_CLOSEDIR
    
    bsr     GetFileListReady            ; Done adding files
    bsr     RenderPath                  ; Update the path
    bsr     RefreshFileList             ; Redraw the list
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Error:
    syscall OS_BEEP                     ; For now...
    moveq   #OSCURSOR_ARROW, d7
    syscall OS_SETCURSOR
    bra.s   *

;****************************************************************************
; DoOpen
; Opens the selected entry.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DoOpen:
    cmpi.w  #1, (NumSelected)           ; Is there an entry selected? (only
    beq.s   @HasOneSelected             ; exactly one must be!)
    syscall OS_BEEP
    rts
@HasOneSelected:
    
    moveq   #0, d0                      ; Get pointer to entry
    moveq   #-1, d7
    move.w  (LastSelected), d0
    add.w   d0, d0
    move.l  (OffsetPtr), a0
    move.w  (a0,d0.l), d7
    move.l  d7, a0

;----------------------------------------------------------------------------

    cmpi.b  #ICON_FOLDER, (a0)          ; Is it a folder?
    bne.s   @NotFolder
    
    lea     (CurrDir), a1               ; Get where current path ends
@SkipDirName:
    tst.b   (a1)+
    bne.s   @SkipDirName
    
    subq.w  #1, a1                      ; Add slash if needed
    cmpi.b  #'/', -1(a1)
    beq.s   @SlashOk
    move.b  #'/', (a1)+
@SlashOk:
    
    addq.w  #2, a0                      ; Append folder's name to it
    moveq   #$20, d6
@AppendDir:
    move.b  (a0)+, d7
    beq.s   @AppendEnd
    cmp.b   d6, d7
    blo.s   @AppendDir
    move.b  d7, (a1)+
    bra.s   @AppendDir
@AppendEnd:
    move.b  #'/', (a1)+
    clr.b   (a1)
    
    bra     LoadDirectory               ; Load the new directory

;----------------------------------------------------------------------------

@NotFolder:
    cmpi.b  #ICON_IXEC, (a0)            ; Executable file?
    beq     OpenIxec
    
    syscall OS_BEEP                     ; Whoops!
    rts                                 ; Can't open for now...

;****************************************************************************
; OpenIxec
; Opens an executable file.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to file entry
;----------------------------------------------------------------------------
; notes: doesn't return
;****************************************************************************

OpenIxec:
    addq.w  #2, a0                      ; Skip icon and padding
    
    moveq   #0, d7                      ; Determine size needed for buffer
    move.l  a0, a6                      ; to hold the whole path (more or
@GetFileLen:                            ; less, doesn't need to be exact as
    addq.w  #1, d7                      ; long as the whole path will fit)
    tst.b   (a6)+
    bne.s   @GetFileLen
    lea     (CurrDir), a6
@GetDirLen:
    addq.w  #1, d7
    tst.b   (a6)+
    bne.s   @GetDirLen
    or.w    #1, d7
    addq.w  #1, d7
    
    neg.w   d7                          ; Allocate buffer
    lea     (sp,d7.w), sp
    
    move.l  sp, a6                      ; Copy directory into buffer
    lea     (CurrDir), a5
@CopyDir:
    move.b  (a5)+, (a6)+
    bne.s   @CopyDir
    subq.w  #1, a6
    
    moveq   #$20, d7                    ; Copy filename into buffer
@CopyFile:                              ; Note that we strip control
    move.b  (a0)+, d6                   ; characters (which were using for
    beq.s   @CopyFileEnd                ; pretty formatting on screen)
    cmp.b   d7, d6
    blo.s   @SkipCtrl
    move.b  d6, (a6)+
@SkipCtrl:
    bra.s   @CopyFile
@CopyFileEnd:
    
    clr.b   (a6)                        ; Insert terminating nul
    
    move.l  sp, a6                      ; Run program
    syscall OS_LOADPROCESS
    illegal

;****************************************************************************
; GoToParent
; Goes to the parent directory.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

GoToParent:
    lea     (CurrDir), a0               ; Check that it's not the root (we
    cmpi.w  #'/'<<8, (a0)               ; can't go up from here)
    bne.s   @NotRoot
    rts
@NotRoot:
    
    lea     1(a0), a1                   ; Find where the last separator is
    moveq   #'/', d6                    ; (note that we have to handle the
@FindLoop:                              ; special case where the path ends in
    move.b  (a0)+, d7                   ; /, which shouldn't be counted)
    beq.s   @FindEnd
    cmp.b   d6, d7
    bne.s   @FindLoop
    tst.b   (a0)
    beq.s   @FindEnd
    move.l  a0, a1
    bra.s   @FindLoop
@FindEnd:
    
    clr.b   (a1)                        ; Cut the path at the last separator
    bra     LoadDirectory               ; Load the new directory

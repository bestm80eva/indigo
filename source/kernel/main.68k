;****************************************************************************
; EntryPoint
; Where the kernel boots.
;****************************************************************************

EntryPoint:
    move.w  #$2700, sr                  ; Disable interrupts
    
    move.b  ($A10001), d7               ; Disable TMSS
    and.b   #$0F, d7
    beq.s   @NoTmss
    move.l  #'SEGA', ($A14000)
@NoTmss:
    
    clr.b   (DebugMode)                 ; Default to normal mode
    addq.b  #1, (ResetCount)            ; Increase reset count
    move.b  #60, (ResetTimer)
    
    tst.b   ($A10009)                   ; Cool boot? (initialize the reset
    bne.s   @WarmBoot                   ; counter in that case)
    move.b  #$40, ($A10009)
    move.b  #$40, ($A10003)
    clr.b   (ResetCount)
    clr.b   (ResetTimer)
@WarmBoot:
    
    if 0
    move.w  #$A000, ($A130F0)           ; Set up the Mega Everdrive mapper
    move.w  #$01, ($A130F2)             ; in a way that will let us get 2MB
    move.w  #$02, ($A130F4)             ; ROM and 2MB RAM (the latter will be
    move.w  #$03, ($A130F6)             ; volatile, but there's a SD card)
    move.w  #$04, ($A130F8)             ; Kind of wishing the write-protect
    move.w  #$05, ($A130FA)             ; flag was actually per page... may
    move.w  #$06, ($A130FC)             ; decide to enable writing only in
    move.w  #$07, ($A130FE)             ; filesystem functions instead
@NoMegaEverdrive:
    endc
    
    moveq   #1, d0                      ; Determine how much RAM is installed
    lea     ($FF0000), a6
    lea     ($FE0000), a5
    lea     ($10000), a4
    moveq   #$20-1, d7
@ProbeRam:
    move.l  #$87654321, (a5)
    move.l  #$12345678, (a6)
    move.l  (a5), d6
    cmpi.l  #$87654321, (a5)
    bne.s   @ProbeRamEnd
    suba.l  a4, a5
    addq.b  #1, d0
    dbf     d7, @ProbeRam
@ProbeRamEnd:
    move.b  d0, (RamSize)
    
    bsr     InitDevices                 ; Set up system
    bsr     InitSound
    bsr     InitVideo
    bsr     InitCursor
    bsr     InitHandles
    
    bsr     SetMouseDefaults            ; Default settings
    
    move.w  #$8174, ($C00004)           ; Turn on screen
    move.w  #$2000, sr                  ; Enable interrupts
    
    moveq   #0, d7                      ; Draw taskbar
    moveq   #32+25, d6
    moveq   #0, d5
    move.w  #38, a6
    move.w  #1, a5
    move.w  #VramTaskbar+$8000, a4
    bsr     FillFrame
    
    lea     @DesktopPath(pc), a6        ; Load desktop or repair mode
    cmpi.b  #3, (ResetCount)            ; depending on how many times the
    bne     LoadProcess                 ; Reset button has been pressed
    clr.b   (ResetCount)
    clr.b   (ResetTimer)
    lea     @RepairPath(pc), a6
    bra     LoadProcess

;----------------------------------------------------------------------------

@DesktopPath:   dc.b    '/rom/apps/desktop.ixec',0
@RepairPath:    dc.b    '/rom/apps/repair.xeci',0
                even

;****************************************************************************
; Interrupt
; Handler for the vblank interrupt (used for timing and for things we want
; to be done periodically regardless of what the program is doing).
;****************************************************************************

Interrupt:
    movem.l d5-d7/a4-a6, -(sp)          ; Save registers
    
    move.b  (ResetTimer), d7            ; Handle the timeout for the Reset
    beq.s   @ResetHandled               ; button (we should go into repair
    subq.b  #1, d7                      ; mode only if it's pressed three
    move.b  d7, (ResetTimer)            ; times quickly)
    bne.s   @ResetHandled
    clr.b   (ResetCount)
@ResetHandled:
    
    moveq   #0, d7                      ; Read peripherals
    bsr     UpdateDevice
    moveq   #1, d7
    bsr     UpdateDevice
    
    bsr     CleanUpMouse                ; Clean up hardware state if needed
    bsr     CleanUpKeyboard
    
    bsr     UpdateCursor                ; Handle the cursor
    bsr     RedrawCursor
    
    bsr     UpdateBeep                  ; Update the beeper
    
    st.b    (NewFrame)                  ; Mark that a new frame started
    movem.l (sp)+, d5-d7/a4-a6          ; Restore registers
    rte                                 ; End of interrupt

MAX_HANDLES:        equ 4               ; Maximum allowed handles (sowwy)
                                        ; Make sure to update GetHandlePtr!

;****************************************************************************
; Status of a handle
;****************************************************************************

                    rsreset
HANDLE_MODE:        rs.b 1              ; Handle mode (see HMODE_*)
HANDLE_FS:          rs.b 1              ; Filesystem (see FILESYS_*)
HANDLE_ADDR:        rs.l 1              ; Address within filesystem
HANDLE_POS:         rs.l 1              ; Current position in bytes
HANDLE_LEN:         rs.l 1              ; File length in bytes

HANDLE_SIZE:        rs.b 0              ; Size of handle data

;****************************************************************************
; Possible modes in which a handle may be open
;****************************************************************************

                    rsreset
                    rs.b 1              ; Not in use
HMODE_NULL:         rs.b 1              ; Unusable
HMODE_READ:         rs.b 1              ; For reading (file)
HMODE_READDIR:      rs.b 1              ; For reading (directory)
HMODE_WRITE:        rs.b 1              ; For writing (file)
HMODE_WRITEDIR:     rs.b 1              ; For writing (directory)

;****************************************************************************
; Possible filesystems
;****************************************************************************

                    rsreset
                    rs.b 1              ; Invalid
FILESYS_ROOT:       rs.b 1              ; Root directory
FILESYS_ROM:        rs.b 1              ; ROM filesystem

;****************************************************************************
; GetHandlePtr [macro]
; Converts a handle ID to a pointer.
;----------------------------------------------------------------------------
; input d7.w .... Handle ID
;----------------------------------------------------------------------------
; output a6.l ... Handle pointer
;----------------------------------------------------------------------------
; breaks: d7
;****************************************************************************

GetHandlePtr: macro
    and.w   #$FF, d7
    add.w   d7, d7
    add.w   d7, d7
    lea     HandlePtrTable(pc), a6
    move.l  (a6,d7.w), a6
    endm

;----------------------------------------------------------------------------

HandlePtrTable:
    dc.l    0
    dc.l    Handles+HANDLE_SIZE*0
    dc.l    Handles+HANDLE_SIZE*1
    dc.l    Handles+HANDLE_SIZE*2
    dc.l    Handles+HANDLE_SIZE*3

;****************************************************************************
; InitHandles
; Initializes the file handles.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitHandles:
    lea     (Handles), a6               ; Mark all handles as free
    moveq   #MAX_HANDLES-1, d7
@Loop:
    clr.b   HANDLE_MODE(a6)
    lea     HANDLE_SIZE(a6), a6
    dbf     d7, @Loop
    
    rts                                 ; End of subroutine

;****************************************************************************
; OpenDir
; Opens a directory for reading its entries.
;----------------------------------------------------------------------------
; input a6.l .... Pointer to filename
;----------------------------------------------------------------------------
; output d7.b ... Handle ID (0 on failure)
;----------------------------------------------------------------------------
; breaks: d5-d6, a4-a6
;****************************************************************************

OpenDir:
    bsr     OpenHandle                  ; Try to open the directory
    move.l  a6, d6
    beq.s   @Error
    
    cmpi.b  #HMODE_READDIR, HANDLE_MODE(a6) ; Make sure it's a directory
    beq.s   @Success

;----------------------------------------------------------------------------

@Error:
    moveq   #0, d7                      ; No handle :(
    
@Success:
    moveq   #0, d6                      ; Clear up registers
    moveq   #0, d5
    move.l  d6, a6
    move.l  d6, a5
    move.l  d6, a4
    
    rts                                 ; End of subroutine

;****************************************************************************
; ReadDir
; Reads the next file entry from a directory.
;----------------------------------------------------------------------------
; input d7.b .... Handle ID
;----------------------------------------------------------------------------
; output a6.l ... Pointer to filename
; output d7.w ... File attributes
; output d6.l ... Filesize in bytes
;----------------------------------------------------------------------------
; breaks: d5, a4-a5
;----------------------------------------------------------------------------
; notes: returns $FFFF in the attributes when there are no more entries, or
; when the handle is invalid or broken
;****************************************************************************

ReadDir:
    GetHandlePtr                        ; Convert ID to pointer
    move.l  a6, d7
    beq.s   @Error
    
    bsr     ReadDirByHandle             ; Read next entry
    cmp.w   #-1, d7                     ; No more entries?
    beq.s   @Error
    
    moveq   #0, d5                      ; Clear up registers
    move.l  d5, a5
    move.l  d5, a4
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Error:
    moveq   #-1, d7                     ; Clear up registers
    moveq   #0, d6
    moveq   #0, d5
    move.l  d5, a6
    move.l  d5, a5
    move.l  d5, a4
    
    rts                                 ; End of subroutine

;****************************************************************************
; ReadDirByHandle
; Same as ReadDir, but using a handle pointer (and exposes some more info).
;----------------------------------------------------------------------------
; input a6.l .... Pointer to handle
;----------------------------------------------------------------------------
; output a6.l ... Pointer to filename
; output d7.w ... File attributes
; output d6.l ... Filesize in bytes
; output d5.w ... First cluster
;----------------------------------------------------------------------------
; breaks: a4-a5
;----------------------------------------------------------------------------
; notes: returns $FFFF in the attributes when there are no more entries.
;****************************************************************************

ReadDirByHandle:
    cmpi.b  #HMODE_READDIR, HANDLE_MODE(a6) ; Make sure it's a directory
    bne.s   @Error
    
    moveq   #0, d7                      ; Ask the filesystem driver to
    move.b  HANDLE_FS(a6), d7           ; read a directory entry
    add.w   d7, d7
    add.w   d7, d7
    lea     @Handlers(pc), a5
    jsr     (a5,d7.w)
    
    cmp.w   #$FFFF, d7                  ; Are there more entries?
    beq.s   @Error
    
    move.l  a5, a6                      ; We want the filename here
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Error:
    moveq   #-1, d7                     ; Return reasonable values
    moveq   #0, d6
    moveq   #0, d5
    move.l  d6, a4
    move.l  d6, a5
    move.l  d6, a6
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Handlers:
    bra.w   @Dummy
    bra.w   RootFS_ReadDir              ; FILESYS_ROOT
    bra.w   RomFS_ReadDir               ; FILESYS_ROM

@Dummy:
    moveq   #-1, d7                     ; Return "no entry"
    rts                                 ; End of dummy handler

;****************************************************************************
; CloseHandle
; Closes a handle.
;----------------------------------------------------------------------------
; input d7.b .... Handle ID
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

CloseHandle:
    GetHandlePtr                        ; Convert ID to pointer
    
CloseHandleByPtr:
    move.l  a6, d7                      ; Valid handle?
    beq.s   @Error
    
    clr.b   HANDLE_MODE(a6)             ; Mark handle as free

;----------------------------------------------------------------------------

@Error:
    moveq   #0, d7                      ; Zero out registers
    moveq   #0, d6
    moveq   #0, d5
    move.l  d7, a6
    move.l  d7, a5
    move.l  d7, a4
    
    rts                                 ; End of subroutine

;****************************************************************************
; CloseAllHandles
; Closes all open handles.
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

CloseAllHandles:
    move.w  d0, -(sp)                   ; Save registers
    move.l  a0, -(sp)
    
    lea     (Handles), a0               ; Close all handles
    moveq   #MAX_HANDLES-1, d0
@Loop:
    move.l  a0, a6
    bsr     CloseHandleByPtr
    dbf     d0, @Loop
    
    move.l  (sp)+, a0                   ; Restore registers
    move.w  (sp)+, d0
    rts                                 ; End of subroutine

;****************************************************************************
; AllocHandle
; Allocates a file handle.
;----------------------------------------------------------------------------
; output a6.l ... Pointer to handle (0 on failure)
; output d7.w ... Handle ID
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a5
;****************************************************************************

AllocHandle:
    lea     (Handles), a6               ; Scan for a free handle
    moveq   #MAX_HANDLES-1, d6
    moveq   #1, d7
@Loop:
    tst.b   HANDLE_MODE(a6)
    beq.s   @Found
    lea     HANDLE_SIZE(a6), a6
    addq.w  #1, d7
    dbf     d6, @Loop
    
    move.l  #0, a6                      ; No free handle
    moveq   #0, d7
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Found:
    move.b  #HMODE_NULL,HANDLE_MODE(a6) ; Initialize handle
    clr.b   HANDLE_FS(a6)
    clr.l   HANDLE_ADDR(a6)
    clr.l   HANDLE_POS(a6)
    clr.l   HANDLE_LEN(a6)
    
    rts                                 ; End of subroutine

;****************************************************************************
; OpenHandle
; Allocates a file handle and makes it point to a file/directory. This
; subroutine can fail if the requested file doesn't exist.
;----------------------------------------------------------------------------
; input a6.l .... Pointer to filename
;----------------------------------------------------------------------------
; output a6.l ... Pointer to handle (0 on failure)
; output d7.w ... Handle ID
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a5
;****************************************************************************

OpenHandle:
    cmpi.b  #'/', (a6)+                 ; Absolute paths only, sorry
    bne.s   @Error
    
    tst.b   (a6)                        ; Open "/"?
    beq     @Root
    
    move.b  (a6)+, -(sp)                ; Get next four characters
    move.w  (sp)+, d7
    move.b  (a6)+, d7
    swap    d7
    move.b  (a6)+, -(sp)
    move.w  (sp)+, d7
    move.b  (a6)+, d7
    
    cmp.l   #'rom'<<8, d7               ; Open "/rom"?
    beq     @RomRoot
    cmp.l   #'rom/', d7
    beq     @RomRoot

;----------------------------------------------------------------------------

@Error:
    moveq   #0, d7                      ; For now not supported, sorry
    moveq   #0, d6
    moveq   #0, d5
    move.l  d7, a6
    move.l  d7, a5
    move.l  d7, a4
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Root:
    bsr     AllocHandle                 ; Get a new handle
    move.l  a6, d6
    beq     @Error
    
    move.b  #HMODE_READDIR, HANDLE_MODE(a6) ; Set up handle
    move.b  #FILESYS_ROOT, HANDLE_FS(a6)
    
    rts                                 ; Return handle

;----------------------------------------------------------------------------

@RomRoot:
    move.l  a6, -(sp)                   ; Get a new handle
    bsr     AllocHandle
    move.l  (sp)+, a5
    move.l  a6, d6
    beq     @Error
    
    move.b  #HMODE_READDIR, HANDLE_MODE(a6) ; Set up handle
    move.b  #FILESYS_ROM, HANDLE_FS(a6)
    move.l  #RomFilesystem, HANDLE_ADDR(a6)
    
    tst.b   -1(a5)                      ; Check if it's the end of the path
    beq.s   @NoRomSubdir
    move.w  d7, -(sp)
    bsr     IntoSubdir
    move.w  (sp)+, d7
@NoRomSubdir:
    
    rts                                 ; Return handle

;****************************************************************************
;----------------------------------------------------------------------------
; input a6.l .... Pointer to handle
; input a5.l .... Pointer to path portion
;----------------------------------------------------------------------------
; output a6.l ... Pointer to handle (0 if failed)
; output a5.l ... Pointer to next path portion
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a5
;****************************************************************************

IntoSubdir:
    tst.b   (a5)                        ; Was it just a path ended in "/"?
    bne.s   @HasSubpath
    rts
@HasSubpath:
    
    movem.l d0-d4/a0-a3, -(sp)          ; Save registers
    move.l  a6, a0                      ; Put these where they're less
    move.l  a5, a1                      ; prone to get clobbered

;----------------------------------------------------------------------------

    move.l  a1, a6                      ; Get length of subpath (note:
    moveq   #'/', d7                    ; including the terminator!)
@FindSubpathEnd:
    move.b  (a6)+, d6
    beq.s   @FoundSubpathEnd
    cmp.b   d7, d6
    bne.s   @FindSubpathEnd
@FoundSubpathEnd:
    move.w  a6, d7
    sub.w   a1, d7
    
    move.w  d7, d0                      ; Allocate buffer for subpath
    or.w    #1, d0
    addq.w  #1, d0
    neg.w   d0
    lea     (sp,d0.w), sp
    
    move.l  sp, a6                      ; Copy subpath into buffer
    subq.w  #1+1, d7
@CopySubpath:
    move.b  (a1)+, (a6)+
    dbf     d7, @CopySubpath
    clr.b   (a6)
    addq.l  #1, a1

;----------------------------------------------------------------------------

@Loop:
    move.l  a0, a6                      ; Get next entry
    bsr     ReadDirByHandle
    cmp.w   #$FFFF, d7
    beq.s   @NoEntry
    
    move.w  d7, d1                      ; Prevent these from getting
    move.l  d6, d2                      ; clobbered
    move.w  d5, d3
    
    move.l  sp, a5                      ; Is this the entry we want?
    bsr     AreStringsEqual
    tst.w   d7
    beq.s   @Loop
    bra.s   @FoundIt

;----------------------------------------------------------------------------

@NoEntry:
    clr.b   HANDLE_MODE(a0)             ; Free the handle
    move.w  #0, a0                      ; No handle to give back
    moveq   #0, d7
    bra.s   @End

;----------------------------------------------------------------------------

@FoundIt:
    moveq   #HMODE_READ, d7             ; Update handle mode accordingly
    tst.w   d1
    bpl.s   @ReopenFile
    addq.b  #1, d7
@ReopenFile:
    move.b  d7, HANDLE_MODE(a0)
    
    moveq   #0, d7                      ; Determine filesystem-specific
    move.b  HANDLE_FS(a0), d7           ; callback for reopening
    add.w   d7, d7
    add.w   d7, d7
    lea     @Handlers(pc), a4
    lea     (a4,d7.w), a4
    
    move.w  d1, d7                      ; Reopen the handle
    move.l  d2, d6
    move.w  d3, d5
    move.l  a0, a6
    jsr     (a4)

;----------------------------------------------------------------------------

@End:
    neg.w   d0                          ; Done with the buffer
    lea     (sp,d0.w), sp
    
    move.l  a0, a6                      ; Put these back where they belong
    move.l  a1, a5
    movem.l (sp)+, d0-d4/a0-a3          ; Restore registers
    
    move.l  a6, d6                      ; Stop here if failed already
    beq.s   @Failed
    tst.b   -1(a5)                      ; Was it the end of the path?
    bne     IntoSubdir
@Failed:
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Handlers:
    bra.w   @BadHandler
    bra.w   @BadHandler                 ; FILESYS_ROOT
    bra.w   RomFS_ReopenHandle          ; FILESYS_ROM

@BadHandler:
    illegal
